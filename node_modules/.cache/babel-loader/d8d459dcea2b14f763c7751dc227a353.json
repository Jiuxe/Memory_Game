{"ast":null,"code":"var _jsxFileName = \"/home/jiuxe/Escritorio/Lscript/React/juego-parejas/src/App.js\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Header from './Header/Header';\nimport Tablero from './Tablero/Tablero';\nimport construirBaraja from './utils/construirBaraja';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nlet getEstadoInicial = () => {\n  let baraja = construirBaraja();\n  return {\n    baraja,\n    parejaSeleccionada: [],\n    primeraCarta: null,\n    segundaCarta: null,\n    estaComparando: false,\n    numeroDeIntentos: 0\n  };\n};\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = getEstadoInicial();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(Header, {\n        numeroDeIntentos: this.state.numeroDeIntentos,\n        resetearPartida: () => this.resetearPartida()\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Tablero, {\n        baraja: this.state.baraja,\n        parejaSeleccionada: this.state.parejaSeleccionada,\n        primeraCarta: this.state.primeraCarta,\n        segundaCarta: this.state.segundaCarta,\n        seleccionarCarta: carta => this.seleccionarCarta(carta)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this);\n  }\n\n  seleccionarCarta(carta) {\n    if (this.state.estaComparando || this.state.primeraCarta === carta || this.state.segundaCarta === carta || carta.fueAdivinida) {\n      return;\n    } //let parejaSeleccionada = [...this.state.parejaSeleccionada, carta];\n\n\n    if (primeraCarta === null) {\n      this.state.primeraCarta = carta;\n    } else {\n      this.state.segundaCarta = carta;\n    }\n\n    this.setState({});\n    console.log(\"original:\", this.state.parejaSeleccionada);\n    console.log(\"copia:\", parejaSeleccionada);\n\n    if (this.state.primeraCarta !== null & this.state.segundaCarta !== null) {\n      console.log(\"Entra\");\n      this.compararPareja(this.state.primeraCarta, this.state.segundaCarta);\n      console.log(\"Sale\");\n    }\n\n    console.log(\"Bandera 1\");\n    console.log(parejaSeleccionada);\n  }\n\n  compararPareja(primera, segunda) {\n    //this.setState({estaComparando: true});\n    this.state.estaComparando = true;\n    setTimeout(() => {\n      let baraja = this.state.baraja;\n\n      if (primera.icono === segunda.icono) {\n        baraja = baraja.map(carta => {\n          if (carta.icono !== primeraCarta.icono) {\n            return carta;\n          }\n\n          return { ...carta,\n            fueAdivinada: true\n          };\n        });\n      }\n\n      this.verificarSiHayGanador(baraja);\n      this.state.baraja = baraja;\n      this.state.estaComparando = false;\n      this.state.primeraCarta = null;\n      this.state.segundaCarta = null;\n      this.setState({});\n      /*this.setState({baraja})\n      this.setState({estaComparando: false})\n      this.setState({\n        parejaSeleccionada: []\n      })*/\n    }, 1000);\n  }\n\n  verificarSiHayGanador(baraja) {\n    if (baraja.filter(carta => !carta.fueAdivinada).length === 0) {\n      alert(`Ganaste en ${this.state.numeroDeIntentos} intentos!`);\n    }\n  }\n\n  resetearPartida() {\n    this.setState(getEstadoInicial());\n  }\n\n}\n/*\nconst getEstadoInicial = () => {\n  const baraja = contruirBaraja();\n  return{\n    baraja,\n    parejaSeleccionada: [],\n    estaComparando: false\n  };\n}\n\nfunction App() {\n\n  let state = getEstadoInicial()\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <Tablero \n        baraja = {state.baraja}\n        parejaSeleccionada = {state.parejaSeleccionada}\n        seleccionarCarta = {(carta) => seleccionarCarta(carta, state)} \n      />\n    </div>\n  );\n}\n\nfunction seleccionarCarta(carta, state){\n  \n  if( state.estaComparando ||\n      state.parejaSeleccionada.indexOf(carta) > -1 ||\n      carta.fueAdivinada\n    ){\n      return;\n    }\n\n  console.log(\"carta seleccionada\")\n  state.parejaSeleccionada = [...state.parejaSeleccionada, carta]\n  console.log(state.parejaSeleccionada)\n\n  if (state.parejaSeleccionada.length === 2){\n    compararPareja(state)\n  }\n}\n\nfunction compararPareja(state){\n  state.estaComparando = true;\n\n  setTimeout(() => {\n    const [primeraCarta, segundaCarta] = state.parejaSeleccionada;\n    let baraja = state.baraja;\n\n    if( primeraCarta.icono === segundaCarta.icono){\n      baraja = baraja.map((carta) => {\n        if(carta.icono !== primeraCarta.icono){\n          return carta;\n        }\n        console.log(\"Pareja encontrada\")\n        carta.fueAdivinada = true\n        return {...carta};\n      });\n    }\n\n    state.parejaSeleccionada = []\n    state.baraja = baraja\n    state.estaComparando = false\n\n  }, 1000)\n\n}\n\n*/\n\n\nexport default App;","map":{"version":3,"sources":["/home/jiuxe/Escritorio/Lscript/React/juego-parejas/src/App.js"],"names":["React","Component","Header","Tablero","construirBaraja","getEstadoInicial","baraja","parejaSeleccionada","primeraCarta","segundaCarta","estaComparando","numeroDeIntentos","App","constructor","props","state","render","resetearPartida","carta","seleccionarCarta","fueAdivinida","setState","console","log","compararPareja","primera","segunda","setTimeout","icono","map","fueAdivinada","verificarSiHayGanador","filter","length","alert"],"mappings":"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A,WAAKK,KAAL,CAAWP,YAAX,GAA0B,IAA1B;AACA,WAAKO,KAAL,CAAWN,YAAX,GAA0B,IAA1B;AAEA,WAAKY,QAAL,CAAc,EAAd;AACA;AACN;AACA;AACA;AACA;AACK,KA3BS,EA2BP,IA3BO,CAAV;AA4BD;;AAEDU,EAAAA,qBAAqB,CAACzB,MAAD,EAAS;AAC5B,QACEA,MAAM,CAAC0B,MAAP,CAAed,KAAD,IAAW,CAACA,KAAK,CAACY,YAAhC,EAA8CG,MAA9C,KAAyD,CAD3D,EAEE;AACAC,MAAAA,KAAK,CAAE,cAAa,KAAKnB,KAAL,CAAWJ,gBAAiB,YAA3C,CAAL;AACD;AACF;;AAEDM,EAAAA,eAAe,GAAG;AAChB,SAAKI,QAAL,CACEhB,gBAAgB,EADlB;AAGD;;AAtGyB;AAyG5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,eAAeO,GAAf","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\nimport Header from './Header/Header'\nimport Tablero from './Tablero/Tablero'\nimport construirBaraja from './utils/construirBaraja';\n\n\nlet getEstadoInicial = () => {\n  let baraja = construirBaraja();\n  return {\n    baraja,\n    parejaSeleccionada: [],\n    primeraCarta:null,\n    segundaCarta:null,\n    estaComparando: false,\n    numeroDeIntentos: 0    \n  };\n}\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = getEstadoInicial();\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Header \n          numeroDeIntentos={this.state.numeroDeIntentos}\n          resetearPartida={() => this.resetearPartida()}\n        />\n        <Tablero \n          baraja={this.state.baraja}\n          parejaSeleccionada={this.state.parejaSeleccionada}\n          primeraCarta={this.state.primeraCarta}\n          segundaCarta={this.state.segundaCarta}\n          seleccionarCarta={(carta) => this.seleccionarCarta(carta)}\n        />\n      </div>\n    );\n  }\n\n  seleccionarCarta(carta) {\n    if (\n      this.state.estaComparando ||\n      this.state.primeraCarta === carta ||\n      this.state.segundaCarta === carta ||\n      carta.fueAdivinida\n    ) {\n      return;\n    }\n\n    //let parejaSeleccionada = [...this.state.parejaSeleccionada, carta];\n    \n    if(primeraCarta === null){ this.state.primeraCarta = carta; }\n    else{ this.state.segundaCarta = carta }\n\n    this.setState({});\n    \n    console.log(\"original:\",this.state.parejaSeleccionada)\n    console.log(\"copia:\",parejaSeleccionada)\n\n    if (this.state.primeraCarta !== null & this.state.segundaCarta !== null) {\n      console.log(\"Entra\")\n      this.compararPareja(this.state.primeraCarta, this.state.segundaCarta );\n      console.log(\"Sale\")\n    }\n    console.log(\"Bandera 1\")\n    console.log(parejaSeleccionada)\n\n  }\n\n  compararPareja(primera, segunda) {\n\n    //this.setState({estaComparando: true});\n\n    this.state.estaComparando = true\n\n    setTimeout(() => {\n      \n      let baraja = this.state.baraja;\n\n      if (primera.icono === segunda.icono) {\n        baraja = baraja.map((carta) => {\n          if (carta.icono !== primeraCarta.icono) {\n            return carta;\n          }\n\n          return {...carta, fueAdivinada: true};\n        });\n      }\n\n      this.verificarSiHayGanador(baraja);\n      \n      this.state.baraja = baraja\n      this.state.estaComparando = false\n      this.state.primeraCarta = null\n      this.state.segundaCarta = null\n\n      this.setState({})\n      /*this.setState({baraja})\n      this.setState({estaComparando: false})\n      this.setState({\n        parejaSeleccionada: []\n      })*/\n    }, 1000)\n  }\n\n  verificarSiHayGanador(baraja) {\n    if (\n      baraja.filter((carta) => !carta.fueAdivinada).length === 0\n    ) {\n      alert(`Ganaste en ${this.state.numeroDeIntentos} intentos!`);\n    }\n  }\n\n  resetearPartida() {\n    this.setState(\n      getEstadoInicial()\n    );\n  }\n}\n\n/*\nconst getEstadoInicial = () => {\n  const baraja = contruirBaraja();\n  return{\n    baraja,\n    parejaSeleccionada: [],\n    estaComparando: false\n  };\n}\n\nfunction App() {\n\n  let state = getEstadoInicial()\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <Tablero \n        baraja = {state.baraja}\n        parejaSeleccionada = {state.parejaSeleccionada}\n        seleccionarCarta = {(carta) => seleccionarCarta(carta, state)} \n      />\n    </div>\n  );\n}\n\nfunction seleccionarCarta(carta, state){\n  \n  if( state.estaComparando ||\n      state.parejaSeleccionada.indexOf(carta) > -1 ||\n      carta.fueAdivinada\n    ){\n      return;\n    }\n\n  console.log(\"carta seleccionada\")\n  state.parejaSeleccionada = [...state.parejaSeleccionada, carta]\n  console.log(state.parejaSeleccionada)\n\n  if (state.parejaSeleccionada.length === 2){\n    compararPareja(state)\n  }\n}\n\nfunction compararPareja(state){\n  state.estaComparando = true;\n\n  setTimeout(() => {\n    const [primeraCarta, segundaCarta] = state.parejaSeleccionada;\n    let baraja = state.baraja;\n\n    if( primeraCarta.icono === segundaCarta.icono){\n      baraja = baraja.map((carta) => {\n        if(carta.icono !== primeraCarta.icono){\n          return carta;\n        }\n        console.log(\"Pareja encontrada\")\n        carta.fueAdivinada = true\n        return {...carta};\n      });\n    }\n\n    state.parejaSeleccionada = []\n    state.baraja = baraja\n    state.estaComparando = false\n\n  }, 1000)\n\n}\n\n*/\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}